import { Router, Request, Response } from 'express';
import { authMiddleware } from '../middleware/auth.middleware';
import { StatusService } from '../services/status.service';
import { DiagnosticService } from '../services/diagnostic.service';
import { SuggestionService } from '../services/suggestion.service';

const statusService = new StatusService();
const diagnosticService = new DiagnosticService();
const suggestionService = new SuggestionService();
import { logger } from '../utils/logger';

const router = Router();

interface BatchRequestItem {
  id: string;
  type: 'status' | 'diagnostic' | 'suggestions';
  baselineId: string;
}

interface BatchResponse {
  id: string;
  type: string;
  success: boolean;
  data?: any;
  error?: any;
}

/**
 * POST /api/batch
 * 批量请求多个资源
 */
router.post('/', authMiddleware({ required: false }), async (req: Request, res: Response) => {
  try {
    const { requests } = req.body as { requests: BatchRequestItem[] };

    if (!requests || !Array.isArray(requests)) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'INVALID_REQUEST',
          message: 'Invalid batch request format'
        }
      });
    }

    if (requests.length > 50) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'BATCH_TOO_LARGE',
          message: 'Batch size cannot exceed 50 requests'
        }
      });
    }

    logger.info(`Processing batch request with ${requests.length} items`);

    // 并行处理所有请求
    const results = await Promise.allSettled(
      requests.map(async (item): Promise<BatchResponse> => {
        try {
          let data: any;

          switch (item.type) {
            case 'status':
              data = await statusService.getBaselineStatus(item.baselineId);
              break;
            
            case 'diagnostic':
              data = await diagnosticService.getDiagnostic(item.baselineId);
              break;
            
            case 'suggestions':
              data = await suggestionService.getSuggestions(item.baselineId);
              break;
            
            default:
              throw new Error(`Unknown request type: ${item.type}`);
          }

          return {
            id: item.id,
            type: item.type,
            success: true,
            data
          };
        } catch (error) {
          logger.error(`Batch request failed for ${item.id}:`, error);
          return {
            id: item.id,
            type: item.type,
            success: false,
            error: {
              code: 'REQUEST_FAILED',
              message: error instanceof Error ? error.message : 'Unknown error'
            }
          };
        }
      })
    );

    // 转换结果格式
    const responses = results.map(result => 
      result.status === 'fulfilled' ? result.value : {
        id: 'unknown',
        type: 'unknown',
        success: false,
        error: {
          code: 'PROCESSING_ERROR',
          message: 'Failed to process request'
        }
      }
    );

    res.json({
      success: true,
      data: {
        responses,
        stats: {
          total: responses.length,
          successful: responses.filter(r => r.success).length,
          failed: responses.filter(r => !r.success).length
        }
      }
    });
  } catch (error) {
    logger.error('Batch request error:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'BATCH_ERROR',
        message: 'Failed to process batch request'
      }
    });
  }
});

/**
 * POST /api/batch/baselines
 * 批量获取基准信息（优化版）
 */
router.post('/baselines', authMiddleware({ required: false }), async (req: Request, res: Response) => {
  try {
    const { baselineIds, fields } = req.body as { 
      baselineIds: string[];
      fields?: string[]; // 可选：指定要返回的字段
    };

    if (!baselineIds || !Array.isArray(baselineIds)) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'INVALID_REQUEST',
          message: 'baselineIds must be an array'
        }
      });
    }

    if (baselineIds.length > 100) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'BATCH_TOO_LARGE',
          message: 'Cannot request more than 100 baselines at once'
        }
      });
    }

    logger.info(`Batch loading ${baselineIds.length} baselines`);

    // 并行获取所有基准的状态
    const results = await Promise.allSettled(
      baselineIds.map(id => statusService.getBaselineStatus(id))
    );

    // 构建响应
    const baselines: Record<string, any> = {};
    const errors: Record<string, any> = {};

    baselineIds.forEach((id, index) => {
      const result = results[index];
      if (result.status === 'fulfilled') {
        baselines[id] = result.value;
      } else {
        errors[id] = {
          code: 'LOAD_FAILED',
          message: result.reason?.message || 'Failed to load baseline'
        };
      }
    });

    res.json({
      success: true,
      data: {
        baselines,
        errors,
        stats: {
          requested: baselineIds.length,
          loaded: Object.keys(baselines).length,
          failed: Object.keys(errors).length
        }
      }
    });
  } catch (error) {
    logger.error('Batch baselines error:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'BATCH_ERROR',
        message: 'Failed to load baselines'
      }
    });
  }
});

export default router;